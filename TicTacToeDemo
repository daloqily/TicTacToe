from os import RTLD_GLOBAL
## Function to print the board

def print_board(values):
  print("\n")
  print("\t    |     |") ## using a list for values
  print("\t {}  |  {}  | {}".format(values[0],values[1],values[2]))
  print('\t____|_____|_____')

  print("\t    |     |")
  print("\t {}  |  {}  | {}".format(values[3],values[4],values[5]))
  print('\t____|_____|_____')

  print("\t    |     |")
  print("\t {}  |  {}  | {}".format(values[6],values[7],values[8]))
  print("\t    |     |")
  print("\n")



##Function to print scoreboard of players

def print_scoreBoard(score_board):
  print("\t-------------------------------------")
  print("\t           SCORE BOARD              ")
  print("\t-------------------------------------")

  players=list(score_board.keys())
  print("\t   ",players[0], "\t   ", score_board[players[0]])
  print("\t   ",players[1], "\t   ", score_board[players[1]])

## Function to check of a player wins by satisfying one winning condition in every iteration

def check_winner(player_position, current_player):

  # save all possible winning positions in a list
  winPos =[[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]]

  #check if any winning position is satisfied by a players position
  for x in winPos: 
      if all(y in player_position[current_player] for y in x):
         return True
  return False

## check if its a draw : all grids are filled
def check_draw(player_position):
  if len(player_position['X'] ) + len(player_position['O']) == 9:
    return True
  return False


#Function of a single game 
def single_game(current_player):
  #values that represent the tic tac toe grid
  values=[' ' for x in range(9)]

  #Store positions occupied by 'X' - 'O' using a dictionary and a list for each x-o
  player_position={'X':[], 'O':[]}

  #Game loop that checks all functions for winning conditions every iteration

  while True:
    print_board(values)

    #Try block for user input(positions) handlng
    try:
      print("player", current_player, "turn. Which cell? : ", end="")
      #store user input
      move=int(input())
    except ValueError:
      print("Incorrect input! please enter an integer")
      continue
    if move <1 or move >9:
      print("Please only inter a value from 1 - 9")
      continue

    #check if user selection of a cell is occupied or not
    if values[move-1] != ' ':
      print("you chose an accupied cell, please choose another")
      continue
      
    #update gama status 

    #update board status ?
    values[move-1] = current_player

    #update player_position
    player_position[current_player].append(move)


    #check winner
    if check_winner(player_position , current_player):
      print_board(values)
      print("Player ", current_player, " has won!")
      print("\n")
      return current_player

    #check draw
    if check_draw(player_position):
      print_board(values)
      print("It's a draw!")
      print("\n")
      return 'D'

    #switch players for taking turns 
    if current_player == 'X':
        current_player = 'O'
    else:
      current_player = 'X'

if __name__ == "__main__":

  print("Player 1:")
  player1=input("Enter your name: ")
  print("\n")

  print("Player 2:")
  player2=input("Enter your name: ")
  print("\n")

  current_player = player1

  player_choice = {'X' : "", 'O' : ""}

  options = ['X','O']
  score_board = {player1: 0, player2: 0}
  print_scoreBoard(score_board)


  while True:

    #Player choice menu
    print("Turn to choose for", current_player)
    print("Enter 1 for X")
    print("Enter 2 for O")
    print("Enter 3 to Quit")


    # Try block for handling user choices
    try:
      choice = int(input())
    except ValueError:
      print("Incorrect input! please choose from the list")
      continue


    # conditions of player choice
    if choice == 1:
      player_choice['X'] = current_player
      if current_player == player1:
        player_choice['O'] = player2
      else:
        player_choice['O'] = player1

    elif choice == 2:
      player_choice['O'] = current_player
      if current_player == player1:
        player_choice['X'] = player2
      else:
        player_choice['X'] = player1

    elif choice ==3:
      print("Final Scores")
      print_scoreBoard(score_board)
      break
    else:
      print("incorrect choice, try again\n")

    #stroe the winner
    winner = single_game(options[choice-1])

    
    #upadate scoreboard
    if winner != 'D':
       player_won = player_choice[winner]
       score_board[player_won] = score_board[player_won] + 1

    print_scoreBoard(score_board)

    #switch players
    if current_player == player1:
       current_player= player2
    else:
      current_player = player1

      






    


